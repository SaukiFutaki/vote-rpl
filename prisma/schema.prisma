// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
   output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum USerRole {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  nim           String?         @unique
  password      String?
  role          USerRole        @default(USER)
  accounts      Account[]
  sessions      Session[]
  votes         Vote[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model VotingSession {
  id         String      @id @default(cuid())
  title      String
  from       DateTime
  to         DateTime
  candidates Candidate[] @relation("VotingSessionCandidates")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  code       String      @unique
  publisher  String
  Vote       Vote[]
  isPublished Boolean
  isViewabled  Boolean
  

  @@map("voting_sessions")
}

model Candidate {
  id        String        @id @default(cuid())
  name      String
  vision    String
  mission   String
  votes     Vote[]
  sessionId String
  image     String
  session   VotingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade, name: "VotingSessionCandidates")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("candidates")
}

model Vote {
  id          String        @id @default(cuid())
  candidateId String
  candidate   Candidate     @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  voterId     String
  voter       User          @relation(fields: [voterId], references: [id], onDelete: Cascade)
  sessionId   String
  session     VotingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("votes")
}
